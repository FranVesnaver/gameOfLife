@startuml
'https://plantuml.com/class-diagram

package gameoflife {

    package rule {
        interface Rule {
            survives(int livingNeighbors)
            born(int livingNeighbors)
        }

        class ClassicRule implements Rule {
            survives(int livingNeighbors)
            born(int livingNeighbors
        }

        class HighLifeRule implements Rule {
            survives(int livingNeighbors)
            born(int livingNeighbors)
        }

        class BreederRule implements Rule {
            survives(int livingNeighbors)
            born(int livingNeighbors)
        }

        class DiffusionRule implements Rule {
            survives(int livingNeighbors)
            born(int livingNeighbors)
        }

        class LifeWithoutDeathRule implements Rule {
            survives(int livingNeighbors)
            born(int livingNeighbors)
        }
    }

    package colorRule {
        interface ColorRule {
            colorAtBirth(List<Color> neighboursColors)
        }

        class NoColorRule implements ColorRule {
            colorAtBirth(List<Color> neighboursColors)
        }

        class ImmigrationColorRule implements ColorRule  {
            colorAtBirth(List<Color> neighboursColors)
        }

        class QuadLifeColorRule implements ColorRule  {
            colorAtBirth(List<Color> neighboursColors)
        }
    }

    package stateBehavior {
        abstract StateBehavior{
            abstract isAlive()
            abstract toString()
            equals()
            hashCode()
        }

        class Alive extends StateBehavior {
            isAlive()
            toString()
        }

        class Dead extends StateBehavior {
            isAlive()
            toString()
        }
    }

    package color {
        abstract Color {
            abstract getColor()
            abstract toString()
            equals()
            hashCode()
        }

        class Red extends Color {
            getColor()
            toString()
        }

        class Blue extends Color {
            getColor()
            toString()
        }

        class Green extends Color {
            getColor()
            toString()
        }

        class Yellow extends Color {
            getColor()
            toString()
        }

        class Magenta extends Color {
            getColor()
            toString()
        }

        class White extends Color {
            getColor()
            toString()
        }

        class Black extends Color {
            getColor()
            toString()
        }
    }

    package display {

        package boarddisplay {
            interface BoardDisplay {
                displayBoard()
            }

            class LivingWhiteDeadBlackDisplay implements BoardDisplay, gameoflife.observer.Observer {
                displayBoard()
            }

            class LivingBlackDeadWhiteDisplay implements BoardDisplay, gameoflife.observer.Observer{
                displayBoard()
            }

            class RandomColorDisplay implements BoardDisplay, gameoflife.observer.Observer {
                displayBoard()
            }
        }

        package statisticsdisplay {
            interface StatisticsDisplay {
                displayStatistics()
            }

            class PopulationStatisticsDisplay implements StatisticsDisplay, gameoflife.observer.Observer {
                displayStatistics()
            }
        }
    }

    package observer {
        interface Observer {
            update(Board board)
        }

        interface Subject {
            registerObserver(Observer o)
            removeObserver(Observer o)
            notifyObservers()
        }
    }

    class Cell {
        StateBehavior state
        Color color

        Cell(StateBehavior state, Color color)
        setState()
        setColor()
        getColor()
    }
    Cell::state -- StateBehavior
    Cell::color -- Color

    class Board {
        int rows
        int columns
        Cell[][] grid

        Board(int rows, int columns)
        getCellAt(int row, int column)
        setCellAt(int row, int column, Cell cell)
        getLivingNeighbours(int row, int column)
    }
    Board - "*" Cell

    class GameOfLife implements observer.Subject {
        Board board
        Rule rule
        ColorRule colorRule

        GameOfLife(int rows, int columns)
        computeNextGeneration()
        displayGrid()
        setLivingCell(int row, int column)
        setDeadCell(int row, int column)
    }
    GameOfLife::board -- Board
    GameOfLife::rule --- Rule
    GameOfLife::colorRule --- ColorRule
}

@enduml

